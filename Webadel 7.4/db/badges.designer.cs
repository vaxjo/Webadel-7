#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Webadel7.DB_Badges
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="DB_121619_webadel")]
	public partial class DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBadge_User(Badge_User instance);
    partial void UpdateBadge_User(Badge_User instance);
    partial void DeleteBadge_User(Badge_User instance);
    partial void InsertBadge(Badge instance);
    partial void UpdateBadge(Badge instance);
    partial void DeleteBadge(Badge instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    #endregion
		
		public DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["Webadel"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Badge_User> Badge_Users
		{
			get
			{
				return this.GetTable<Badge_User>();
			}
		}
		
		public System.Data.Linq.Table<Badge> Badges
		{
			get
			{
				return this.GetTable<Badge>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Badge_User")]
	public partial class Badge_User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _userId;
		
		private int _badgeId;
		
		private System.DateTime _awarded;
		
		private bool _new;
		
		private EntityRef<Badge> _Badge;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnuserIdChanging(System.Guid value);
    partial void OnuserIdChanged();
    partial void OnbadgeIdChanging(int value);
    partial void OnbadgeIdChanged();
    partial void OnawardedChanging(System.DateTime value);
    partial void OnawardedChanged();
    partial void OnnewChanging(bool value);
    partial void OnnewChanged();
    #endregion
		
		public Badge_User()
		{
			this._Badge = default(EntityRef<Badge>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_userId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid userId
		{
			get
			{
				return this._userId;
			}
			set
			{
				if ((this._userId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnuserIdChanging(value);
					this.SendPropertyChanging();
					this._userId = value;
					this.SendPropertyChanged("userId");
					this.OnuserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_badgeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int badgeId
		{
			get
			{
				return this._badgeId;
			}
			set
			{
				if ((this._badgeId != value))
				{
					if (this._Badge.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbadgeIdChanging(value);
					this.SendPropertyChanging();
					this._badgeId = value;
					this.SendPropertyChanged("badgeId");
					this.OnbadgeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_awarded", DbType="DateTime2 NOT NULL")]
		public System.DateTime awarded
		{
			get
			{
				return this._awarded;
			}
			set
			{
				if ((this._awarded != value))
				{
					this.OnawardedChanging(value);
					this.SendPropertyChanging();
					this._awarded = value;
					this.SendPropertyChanged("awarded");
					this.OnawardedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="new", Storage="_new", DbType="Bit NOT NULL")]
		public bool @new
		{
			get
			{
				return this._new;
			}
			set
			{
				if ((this._new != value))
				{
					this.OnnewChanging(value);
					this.SendPropertyChanging();
					this._new = value;
					this.SendPropertyChanged("@new");
					this.OnnewChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Badge_Badge_User", Storage="_Badge", ThisKey="badgeId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Badge Badge
		{
			get
			{
				return this._Badge.Entity;
			}
			set
			{
				Badge previousValue = this._Badge.Entity;
				if (((previousValue != value) 
							|| (this._Badge.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Badge.Entity = null;
						previousValue.Badge_Users.Remove(this);
					}
					this._Badge.Entity = value;
					if ((value != null))
					{
						value.Badge_Users.Add(this);
						this._badgeId = value.id;
					}
					else
					{
						this._badgeId = default(int);
					}
					this.SendPropertyChanged("Badge");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Badge_User", Storage="_User", ThisKey="userId", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Badge_Users.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Badge_Users.Add(this);
						this._userId = value.id;
					}
					else
					{
						this._userId = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Badge")]
	public partial class Badge : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _text;
		
		private string _description;
		
		private System.DateTime _added;
		
		private System.Guid _creator;
		
		private bool _pendingApproval;
		
		private EntitySet<Badge_User> _Badge_Users;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OntextChanging(string value);
    partial void OntextChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnaddedChanging(System.DateTime value);
    partial void OnaddedChanged();
    partial void OncreatorChanging(System.Guid value);
    partial void OncreatorChanged();
    partial void OnpendingApprovalChanging(bool value);
    partial void OnpendingApprovalChanged();
    #endregion
		
		public Badge()
		{
			this._Badge_Users = new EntitySet<Badge_User>(new Action<Badge_User>(this.attach_Badge_Users), new Action<Badge_User>(this.detach_Badge_Users));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(255) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_text", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string text
		{
			get
			{
				return this._text;
			}
			set
			{
				if ((this._text != value))
				{
					this.OntextChanging(value);
					this.SendPropertyChanging();
					this._text = value;
					this.SendPropertyChanged("text");
					this.OntextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(8000) NOT NULL", CanBeNull=false)]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_added", DbType="DateTime2 NOT NULL")]
		public System.DateTime added
		{
			get
			{
				return this._added;
			}
			set
			{
				if ((this._added != value))
				{
					this.OnaddedChanging(value);
					this.SendPropertyChanging();
					this._added = value;
					this.SendPropertyChanged("added");
					this.OnaddedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_creator", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid creator
		{
			get
			{
				return this._creator;
			}
			set
			{
				if ((this._creator != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OncreatorChanging(value);
					this.SendPropertyChanging();
					this._creator = value;
					this.SendPropertyChanged("creator");
					this.OncreatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pendingApproval", DbType="Bit NOT NULL")]
		public bool pendingApproval
		{
			get
			{
				return this._pendingApproval;
			}
			set
			{
				if ((this._pendingApproval != value))
				{
					this.OnpendingApprovalChanging(value);
					this.SendPropertyChanging();
					this._pendingApproval = value;
					this.SendPropertyChanged("pendingApproval");
					this.OnpendingApprovalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Badge_Badge_User", Storage="_Badge_Users", ThisKey="id", OtherKey="badgeId")]
		public EntitySet<Badge_User> Badge_Users
		{
			get
			{
				return this._Badge_Users;
			}
			set
			{
				this._Badge_Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Badge", Storage="_User", ThisKey="creator", OtherKey="id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Badges.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Badges.Add(this);
						this._creator = value.id;
					}
					else
					{
						this._creator = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Badge_Users(Badge_User entity)
		{
			this.SendPropertyChanging();
			entity.Badge = this;
		}
		
		private void detach_Badge_Users(Badge_User entity)
		{
			this.SendPropertyChanging();
			entity.Badge = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _id;
		
		private string _username;
		
		private string _password;
		
		private bool _deleted;
		
		private bool _trusted;
		
		private bool _aide;
		
		private bool _cosysop;
		
		private string _email;
		
		private byte _attachmentDisplay;
		
		private bool _enableSwipe;
		
		private bool _enablePredictiveText;
		
		private System.DateTime _lastActivity;
		
		private System.DateTime _created;
		
		private string _notes;
		
		private bool _twit;
		
		private string _miscDictionary;
		
		private EntitySet<Badge_User> _Badge_Users;
		
		private EntitySet<Badge> _Badges;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(System.Guid value);
    partial void OnidChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OndeletedChanging(bool value);
    partial void OndeletedChanged();
    partial void OntrustedChanging(bool value);
    partial void OntrustedChanged();
    partial void OnaideChanging(bool value);
    partial void OnaideChanged();
    partial void OncosysopChanging(bool value);
    partial void OncosysopChanged();
    partial void OnemailChanging(string value);
    partial void OnemailChanged();
    partial void OnattachmentDisplayChanging(byte value);
    partial void OnattachmentDisplayChanged();
    partial void OnenableSwipeChanging(bool value);
    partial void OnenableSwipeChanged();
    partial void OnenablePredictiveTextChanging(bool value);
    partial void OnenablePredictiveTextChanged();
    partial void OnlastActivityChanging(System.DateTime value);
    partial void OnlastActivityChanged();
    partial void OncreatedChanging(System.DateTime value);
    partial void OncreatedChanged();
    partial void OnnotesChanging(string value);
    partial void OnnotesChanged();
    partial void OntwitChanging(bool value);
    partial void OntwitChanged();
    partial void OnmiscDictionaryChanging(string value);
    partial void OnmiscDictionaryChanged();
    #endregion
		
		public User()
		{
			this._Badge_Users = new EntitySet<Badge_User>(new Action<Badge_User>(this.attach_Badge_Users), new Action<Badge_User>(this.detach_Badge_Users));
			this._Badges = new EntitySet<Badge>(new Action<Badge>(this.attach_Badges), new Action<Badge>(this.detach_Badges));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(32) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_deleted", DbType="Bit NOT NULL")]
		public bool deleted
		{
			get
			{
				return this._deleted;
			}
			set
			{
				if ((this._deleted != value))
				{
					this.OndeletedChanging(value);
					this.SendPropertyChanging();
					this._deleted = value;
					this.SendPropertyChanged("deleted");
					this.OndeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_trusted", DbType="Bit NOT NULL")]
		public bool trusted
		{
			get
			{
				return this._trusted;
			}
			set
			{
				if ((this._trusted != value))
				{
					this.OntrustedChanging(value);
					this.SendPropertyChanging();
					this._trusted = value;
					this.SendPropertyChanged("trusted");
					this.OntrustedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_aide", DbType="Bit NOT NULL")]
		public bool aide
		{
			get
			{
				return this._aide;
			}
			set
			{
				if ((this._aide != value))
				{
					this.OnaideChanging(value);
					this.SendPropertyChanging();
					this._aide = value;
					this.SendPropertyChanged("aide");
					this.OnaideChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cosysop", DbType="Bit NOT NULL")]
		public bool cosysop
		{
			get
			{
				return this._cosysop;
			}
			set
			{
				if ((this._cosysop != value))
				{
					this.OncosysopChanging(value);
					this.SendPropertyChanging();
					this._cosysop = value;
					this.SendPropertyChanged("cosysop");
					this.OncosysopChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_email", DbType="VarChar(MAX)")]
		public string email
		{
			get
			{
				return this._email;
			}
			set
			{
				if ((this._email != value))
				{
					this.OnemailChanging(value);
					this.SendPropertyChanging();
					this._email = value;
					this.SendPropertyChanged("email");
					this.OnemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_attachmentDisplay", DbType="TinyInt NOT NULL")]
		public byte attachmentDisplay
		{
			get
			{
				return this._attachmentDisplay;
			}
			set
			{
				if ((this._attachmentDisplay != value))
				{
					this.OnattachmentDisplayChanging(value);
					this.SendPropertyChanging();
					this._attachmentDisplay = value;
					this.SendPropertyChanged("attachmentDisplay");
					this.OnattachmentDisplayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enableSwipe", DbType="Bit NOT NULL")]
		public bool enableSwipe
		{
			get
			{
				return this._enableSwipe;
			}
			set
			{
				if ((this._enableSwipe != value))
				{
					this.OnenableSwipeChanging(value);
					this.SendPropertyChanging();
					this._enableSwipe = value;
					this.SendPropertyChanged("enableSwipe");
					this.OnenableSwipeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_enablePredictiveText", DbType="Bit NOT NULL")]
		public bool enablePredictiveText
		{
			get
			{
				return this._enablePredictiveText;
			}
			set
			{
				if ((this._enablePredictiveText != value))
				{
					this.OnenablePredictiveTextChanging(value);
					this.SendPropertyChanging();
					this._enablePredictiveText = value;
					this.SendPropertyChanged("enablePredictiveText");
					this.OnenablePredictiveTextChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastActivity", DbType="DateTime2 NOT NULL")]
		public System.DateTime lastActivity
		{
			get
			{
				return this._lastActivity;
			}
			set
			{
				if ((this._lastActivity != value))
				{
					this.OnlastActivityChanging(value);
					this.SendPropertyChanging();
					this._lastActivity = value;
					this.SendPropertyChanged("lastActivity");
					this.OnlastActivityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_created", DbType="DateTime2 NOT NULL")]
		public System.DateTime created
		{
			get
			{
				return this._created;
			}
			set
			{
				if ((this._created != value))
				{
					this.OncreatedChanging(value);
					this.SendPropertyChanging();
					this._created = value;
					this.SendPropertyChanged("created");
					this.OncreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_notes", DbType="VarChar(MAX)")]
		public string notes
		{
			get
			{
				return this._notes;
			}
			set
			{
				if ((this._notes != value))
				{
					this.OnnotesChanging(value);
					this.SendPropertyChanging();
					this._notes = value;
					this.SendPropertyChanged("notes");
					this.OnnotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_twit", DbType="Bit NOT NULL")]
		public bool twit
		{
			get
			{
				return this._twit;
			}
			set
			{
				if ((this._twit != value))
				{
					this.OntwitChanging(value);
					this.SendPropertyChanging();
					this._twit = value;
					this.SendPropertyChanged("twit");
					this.OntwitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_miscDictionary", DbType="VarChar(8000)")]
		public string miscDictionary
		{
			get
			{
				return this._miscDictionary;
			}
			set
			{
				if ((this._miscDictionary != value))
				{
					this.OnmiscDictionaryChanging(value);
					this.SendPropertyChanging();
					this._miscDictionary = value;
					this.SendPropertyChanged("miscDictionary");
					this.OnmiscDictionaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Badge_User", Storage="_Badge_Users", ThisKey="id", OtherKey="userId")]
		public EntitySet<Badge_User> Badge_Users
		{
			get
			{
				return this._Badge_Users;
			}
			set
			{
				this._Badge_Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Badge", Storage="_Badges", ThisKey="id", OtherKey="creator")]
		public EntitySet<Badge> Badges
		{
			get
			{
				return this._Badges;
			}
			set
			{
				this._Badges.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Badge_Users(Badge_User entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Badge_Users(Badge_User entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Badges(Badge entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Badges(Badge entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
}
#pragma warning restore 1591
